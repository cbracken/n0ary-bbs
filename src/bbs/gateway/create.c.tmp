#include <stdio.h>
#include <sys/wait.h>

#include "config.h"
#include "tools.h"
#include "bbslib.h"
#include "smtp.h"

int user_cnt;

struct User {
	int set;
	char call[10];
	char addr[80];
} user[500];

static int
collect_response_till(int fd, char *term)
{
	char buf[SMTP_BUF_SIZE];
	char *s;

	if((s = (char*)re_comp(term)) != NULL)
		exit(1);

	do {
		s = buf;
		while(TRUE) {
			if(read(fd, s, 1) <= 0)
				exit(0);
			if(*s == '\n') {
				*s = 0;
				break;
			}
			s++;
		}
	} while(re_exec(buf) == FALSE);
}

int
cmd_generate(char *call, int set, char *addr)
{
	int to_bbs[2], to_gate[2];
	char buf[SMTP_BUF_SIZE];

	if(pipe(to_bbs) < 0)
		return ERROR;

	if(pipe(to_gate) < 0) {
		close(to_bbs[0]);
		close(to_bbs[1]);
		return ERROR;
	}

	if(fork() == 0) {
		close(to_bbs[1]);
		close(0);
		dup(to_bbs[0]);
		close(to_bbs[0]);

		close(to_gate[0]);
		close(1);
		dup(to_gate[1]);
		close(to_gate[1]);

		execl(BBS_DIR"/bin/bbbs", "bbbs", call, "SMTP", 0);
		
		exit(1);
	}

	close(to_bbs[0]);
	close(to_gate[1]);

	collect_response_till(to_gate[0], ">$");
	sprintf(buf, "EMAIL %s\n", addr);
	write(to_bbs[1], buf, strlen(buf));
	collect_response_till(to_gate[0], ">$");

	if(set) {
		sprintf(buf, "EMAIL ON\n");
		write(to_bbs[1], buf, strlen(buf));
		collect_response_till(to_gate[0], ">$");
	}


	write(to_bbs[1], "EXIT\n", 5);
	close(to_gate[0]);
	close(to_bbs[1]);
	wait3(NULL, WNOHANG, NULL);
	return OK;
}

main()
{
	FILE *fp = fopen("gateway.allow", "r");
	char buf[256];
	int i;

	user_cnt = 0;

	while(fgets(buf, 256, fp)) {
		char *q, *p = buf;
		int already = 0;

		if(buf[0] == '#' || buf[0] == '\n' || buf[0] == 0)
			continue;
		if((q = (char*)index(buf, '\n')) != NULL)
			*q = 0;

		while(!isspace(*p)) p++;
		*p++ = 0;
		while(isspace(*p)) p++;
		
		for(i=0; i<user_cnt; i++)
			if(!strcmp(user[i].call, buf)) {
				already = 1;
				break;
			}

		if(already)
			continue;

		strcpy(user[user_cnt].call, buf);
		strcpy(user[user_cnt].addr, p);
		user[user_cnt].set = FALSE;
		user_cnt++;
	}
	fclose(fp);

	fp = fopen("Translate", "r");
	while(fgets(buf, 256, fp)) {
		char *c = (char*)index(buf, '\n');
		if(c) *c = 0;

		for(i=0; i<user_cnt; i++)
			if(!strcmp(user[i].call, buf)) {
				user[i].set = TRUE;
				break;
			}
	}
	fclose(fp);


printf("usr_cnt = %d\n", user_cnt);

	for(i=0; i<user_cnt; i++) {
		printf("%d %s\t%s\n", user[i].set, user[i].call, user[i].addr);
#if 1
		cmd_generate(user[i].call, user[i].set, user[i].addr);
#endif
	}
}
